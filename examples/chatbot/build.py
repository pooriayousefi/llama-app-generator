#!/usr/bin/env python3
"""
Build script for {{PROJECT_NAME}}

Copyright 2025 Pooria Yousefi
Licensed under the Apache License, Version 2.0

Generated by llama-app-generator on {{DATE}}
"""

import os
import sys
import subprocess
import platform
from pathlib import Path


def build_target(src_file, output_name, include_dirs, description):
    """Build a single C++ source file"""
    
    # Compiler selection
    if platform.system() == "Windows":
        compiler = os.environ.get("CXX", "g++")
    else:
        compiler = os.environ.get("CXX", "g++")
    
    # Prepare include flags
    include_flags = [f"-I{inc}" for inc in include_dirs]
    
    # Output executable path
    bin_dir = Path("bin")
    bin_dir.mkdir(exist_ok=True)
    
    if platform.system() == "Windows":
        output_exe = bin_dir / f"{output_name}.exe"
    else:
        output_exe = bin_dir / output_name
    
    # Compile command
    compile_cmd = [
        compiler,
        "-std=c++17",
        "-Wall",
        "-Wextra",
        "-O2"
    ] + include_flags + [
        str(src_file),
        "-o", str(output_exe)
    ]
    
    # Add threading support on Unix-like systems
    if platform.system() != "Windows":
        compile_cmd.append("-pthread")
    
    print(f"Building {description}...")
    print(f"  Source:  {src_file}")
    print(f"  Output:  {output_exe}")
    print(f"  Compiling... (this may take some time due to large header-only libraries)")
    print(f"  Progress: ", end="", flush=True)
    
    # Show progress animation
    import threading
    import time
    
    stop_animation = threading.Event()
    
    def show_progress():
        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        idx = 0
        while not stop_animation.is_set():
            print(f"\r  Progress: {frames[idx % len(frames)]} Compiling...", end="", flush=True)
            idx += 1
            time.sleep(0.1)
    
    progress_thread = threading.Thread(target=show_progress, daemon=True)
    progress_thread.start()
    
    try:
        result = subprocess.run(compile_cmd, check=True, capture_output=True, text=True)
        
        stop_animation.set()
        progress_thread.join(timeout=0.5)
        print(f"\r  Progress: ✓ Compilation complete!{' ' * 30}")
        print()
        
        if result.stdout:
            print(result.stdout)
        
        print(f"✓ {description} built successfully!")
        return True
        
    except subprocess.CalledProcessError as e:
        stop_animation.set()
        progress_thread.join(timeout=0.5)
        print(f"\r  Progress: ✗ Compilation failed!{' ' * 30}")
        print()
        
        print(f"✗ {description} build failed!")
        print(f"Error code: {e.returncode}")
        
        if e.stdout:
            print("\nStandard output:")
            print(e.stdout)
        
        if e.stderr:
            print("\nError output:")
            print(e.stderr)
        
        return False
    
    except FileNotFoundError:
        stop_animation.set()
        progress_thread.join(timeout=0.5)
        print(f"\r  Progress: ✗ Compiler not found!{' ' * 30}")
        print()
        
        print(f"✗ Compiler '{compiler}' not found!")
        print(f"Please install a C++ compiler or set the CXX environment variable.")
        return False


def main():
    """Build all targets"""
    
    # Project paths
    project_root = Path(__file__).parent.resolve()
    src_dir = project_root / "src"
    include_dir = project_root / "include"
    
    # Include directories
    include_dirs = [include_dir]
    
    # Targets to build
    targets = [
        {
            "src": src_dir / "server.cpp",
            "output": "server",
            "description": "Application Server"
        },
        {
            "src": src_dir / "client.cpp",
            "output": "client",
            "description": "CLI Client"
        }
    ]
    
    # Extract project name from directory
    project_name = project_root.name
    
    print("=" * 60)
    print(f"Building {project_name}")
    print("=" * 60)
    print()
    
    success_count = 0
    fail_count = 0
    
    for target in targets:
        if build_target(target["src"], target["output"], include_dirs, target["description"]):
            success_count += 1
        else:
            fail_count += 1
        print()
    
    # Summary
    print("=" * 60)
    if fail_count == 0:
        print(f"✓ Build Complete! ({success_count}/{len(targets)} succeeded)")
        print("=" * 60)
        print()
        print("Next steps:")
        print("  1. Edit config.txt to point to your llama.cpp installation")
        print("  2. Start llama-server (see README.md)")
        print("  3. Run: ./bin/server")
        print("  4. In another terminal: ./bin/client complete \"Hello\"")
        print()
        return 0
    else:
        print(f"✗ Build Failed! ({success_count}/{len(targets)} succeeded, {fail_count} failed)")
        print("=" * 60)
        return 1


if __name__ == "__main__":
    sys.exit(main())
